# -*- coding: utf-8 -*-
"""Bai431_Buoi3_Nhom2_CNTT1809.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hoScO3o4DYHJysjykx-Q-f_yuWYyOEJ-

a. Ví dụ minh họa
"""

def sinh_so_nhi_phan(n):
    """
    Sinh tất cả các số nhị phân có độ dài n bằng cách duyệt từ 0 đến 2^n - 1
    và chuyển đổi sang dạng nhị phân.
    """
    if n <= 0:
        print("Độ dài phải là số dương.")
        return

    print(f"Các số nhị phân có độ dài {n}:")
    # Số lượng số nhị phân có độ dài n là 2^n
    so_luong_so = 2**n

    for i in range(so_luong_so):
        # Chuyển số thập phân i sang dạng nhị phân
        # Sử dụng f-string với định dạng {i:0{n}b}
        # ':b' để chuyển sang nhị phân
        # '0{n}' để thêm số 0 vào đầu nếu cần, đảm bảo đủ n chữ số
        dang_nhi_phan = f"{i:0{n}b}"
        print(dang_nhi_phan)

# Sinh các số nhị phân có độ dài 2
sinh_so_nhi_phan(2)

print("\n--- Sinh các số nhị phân có độ dài 3 ---")
sinh_so_nhi_phan(3)

"""b. Yêu cầu sinh viên sửa và lý giải

•	Sinh tất cả các số nhị phân có độ dài 4. Quan sát và giải thích cách chúng được tạo ra.

•	Thay đổi hàm để sinh các số tam phân (chỉ gồm các chữ số 0, 1, 2) có độ dài n. (Gợi ý: Số lượng số tam phân có độ dài n là 3n. Cần viết lại logic chuyển đổi từ số nguyên sang dạng tam phân).

"""

def sinh_so_nhi_phan(n):
    """
    Sinh tất cả các số nhị phân có độ dài n bằng cách duyệt từ 0 đến 2^n - 1
    và chuyển đổi sang dạng nhị phân.
    """
    if n <= 0:
        print("Độ dài phải là số dương.")
        return

    print(f"Các số nhị phân có độ dài {n}:")
    so_luong_so = 2**n  # có 2^n số

    for i in range(so_luong_so):
        # Chuyển i sang nhị phân, thêm số 0 phía trước cho đủ n ký tự
        dang_nhi_phan = f"{i:0{n}b}"
        print(dang_nhi_phan)


# Sinh số nhị phân độ dài 4
sinh_so_nhi_phan(4)

print(" Hàm sinh các số tam phân (0,1,2)")
def chuyen_sang_tam_phan(x, n):
    """
    Chuyển số nguyên x sang chuỗi dạng tam phân có độ dài n.
    """
    ket_qua = ""
    while x > 0:
        so_du = x % 3          # lấy phần dư khi chia 3
        ket_qua = str(so_du) + ket_qua
        x //= 3
    # Thêm số 0 phía trước nếu chưa đủ n ký tự
    return ket_qua.zfill(n)


def sinh_so_tam_phan(n):
    """
    Sinh tất cả các số tam phân có độ dài n.
    """
    if n <= 0:
        print("Độ dài phải là số dương.")
        return

    print(f"Các số tam phân có độ dài {n}:")
    so_luong_so = 3**n  # có 3^n số

    for i in range(so_luong_so):
        dang_tam_phan = chuyen_sang_tam_phan(i, n)
        print(dang_tam_phan)

sinh_so_tam_phan(2)