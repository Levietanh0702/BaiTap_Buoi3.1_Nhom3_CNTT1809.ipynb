# -*- coding: utf-8 -*-
"""Bai4.3.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b3C9vgrGonIg4Xlz33oH9GTsHKy8pHWG

a. Ví dụ minh họa
"""

def liet_ke_hoan_vi(danh_sach_phan_tu):
    """
    Liệt kê tất cả các hoán vị của một danh sách các phần tử bằng thuật toán quay lui.
    """
    ket_qua = [] # Danh sách để lưu trữ tất cả các hoán vị tìm được
    n = len(danh_sach_phan_tu)

    # Hàm trợ giúp đệ quy (hàm con)
    # path: hoán vị hiện tại đang được xây dựng
    # remaining: các phần tử còn lại chưa được sử dụng
    def backtrack(current_permutation, remaining_elements):
        # Điều kiện dừng: nếu không còn phần tử nào, hoán vị đã hoàn thành
        if not remaining_elements:
            ket_qua.append("".join(map(str, current_permutation))) # Thêm hoán vị vào kết quả
            return

        # Duyệt qua từng phần tử còn lại
        for i in range(len(remaining_elements)):
            # Chọn một phần tử
            chon_phan_tu = remaining_elements[i]

            # Đánh dấu phần tử đã chọn (thêm vào hoán vị hiện tại)
            current_permutation.append(chon_phan_tu)

            # Xây dựng danh sách các phần tử còn lại (bỏ phần tử vừa chọn)
            new_remaining = remaining_elements[:i] + remaining_elements[i+1:]

            # Gọi đệ quy cho phần còn lại
            backtrack(current_permutation, new_remaining)

            # Quay lui: bỏ phần tử đã chọn để thử lựa chọn khác
            current_permutation.pop()

    # Bắt đầu quá trình quay lui
    backtrack([], list(danh_sach_phan_tu))
    return ket_qua

# Liệt kê hoán vị của các ký tự 'A', 'B', 'C'
phan_tu_1 = ['A', 'B', 'C']
hoan_vi_1 = liet_ke_hoan_vi(phan_tu_1)
print(f"Các hoán vị của {phan_tu_1}: {hoan_vi_1}")

print("\n--- Liệt kê hoán vị của các số 1, 2 ---")
phan_tu_2 = [1, 2]
hoan_vi_2 = liet_ke_hoan_vi(phan_tu_2)
print(f"Các hoán vị của {phan_tu_2}: {hoan_vi_2}")

"""b. Yêu cầu sinh viên sửa và lý giải

•	Liệt kê tất cả các hoán vị của danh sách số [1, 2, 3, 4].

•	Quan sát cách các hoán vị được tạo ra và giải thích tại sao mỗi phần tử xuất hiện ở vị trí đầu tiên đều có các hoán vị khác nhau ở phần còn lại.

•	Gợi ý nâng cao: Thư viện itertools của Python có hàm permutations làm điều này rất hiệu quả. Hãy tìm hiểu và so sánh cách sử dụng.

"""

def liet_ke_hoan_vi(danh_sach_phan_tu):
    """
    Liệt kê tất cả các hoán vị của một danh sách các phần tử bằng thuật toán quay lui.
    """
    ket_qua = [] # Danh sách để lưu trữ tất cả các hoán vị tìm được
    n = len(danh_sach_phan_tu)

    # Hàm trợ giúp đệ quy (hàm con)
    # path: hoán vị hiện tại đang được xây dựng
    # remaining: các phần tử còn lại chưa được sử dụng
    def backtrack(current_permutation, remaining_elements):
        # Điều kiện dừng: nếu không còn phần tử nào, hoán vị đã hoàn thành
        if not remaining_elements:
            ket_qua.append("".join(map(str, current_permutation))) # Thêm hoán vị vào kết quả
            return

        # Duyệt qua từng phần tử còn lại
        for i in range(len(remaining_elements)):
            # Chọn một phần tử
            chon_phan_tu = remaining_elements[i]

            # Đánh dấu phần tử đã chọn (thêm vào hoán vị hiện tại)
            current_permutation.append(chon_phan_tu)

            # Xây dựng danh sách các phần tử còn lại (bỏ phần tử vừa chọn)
            new_remaining = remaining_elements[:i] + remaining_elements[i+1:]

            # Gọi đệ quy cho phần còn lại
            backtrack(current_permutation, new_remaining)

            # Quay lui: bỏ phần tử đã chọn để thử lựa chọn khác
            current_permutation.pop()

    # Bắt đầu quá trình quay lui
    backtrack([], list(danh_sach_phan_tu))
    return ket_qua

# Liệt kê hoán vị của các ký tự '1', '2', '3', '4'
phan_tu_1 = [1, 2, 3, 4]
hoan_vi_1 = liet_ke_hoan_vi(phan_tu_1)
print(f"Các hoán vị của {phan_tu_1}: {hoan_vi_1}")

"""Giải thích cách sinh hoán vị

Ta có 4 phần tử [1, 2, 3, 4].

Bước 1: Chọn 1 phần tử làm vị trí đầu tiên. Có 4 cách chọn (1, 2, 3, 4).

Bước 2: Với mỗi phần tử đã chọn, ta chỉ còn 3 phần tử phía sau ⇒ tạo 3! = 6 hoán vị.

Như vậy: 4 × 6 = 24 hoán vị.

Vì vậy mỗi số (1, 2, 3, 4) khi đứng đầu, sẽ tạo ra 6 hoán vị khác nhau của 3 số còn lại.
"""

import itertools

nums = [1, 2, 3, 4]
perms = list(itertools.permutations(nums))

print("Số hoán vị:", len(perms))
for p in perms:
    print(p)